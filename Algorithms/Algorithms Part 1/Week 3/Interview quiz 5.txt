import java.util.Random; 

public class NutsAndBolts 
{
	private static int partition(int[] a, int b, int lo, int hi)
	{
		int i = lo, j = hi;
		while (true)
		{
			while (less(a[i], b))
			{
				if (i == hi) break;
				i++;
			}
				
			
			while (less(b, a[j]))
			{
				if (lo == j) break;
				j--;
			}
				

			if (i >= j) break;
			exch(a, i, j);
		}
		return j;
	} 
	
	private static void exch(int[] a, int hi, int lo)
	{
		int buf = a[hi];
		a[hi] = a[lo];
		a[lo] = buf;
	}
	
	private static boolean less(int a, int b)
	{
		if (a < b) return true;
		else return false;
	}
	
	private static void shuffle(int[] a)
	{
		int N = a.length;
		Random rand = new Random(); 
		
		for(int i = 1; i < N; i++)
			exch(a, i, rand.nextInt(i));
	}
	
	private static void sort(int[] nuts, int[] bolts, int lo, int hi)
	{
		 if (hi <= lo) return;
		 int j = partition(nuts, bolts[lo], lo, hi);
		 partition(bolts, nuts[j], lo, hi);
		 
		 sort(nuts, bolts, lo, j-1);
		 sort(nuts, bolts, j+1, hi);
	}
	
	public void SortNutsAndBolts(int[] nuts, int[] bolts)
	{
		shuffle(nuts);
		shuffle(bolts);
		sort(nuts, bolts, 0, nuts.length - 1);
	}
	
	public static void main(String[] args)
	{
		int[] nuts = {-50, -20, -33, 4, 55, 666, 7, -8, 23, 19};
		int[] bolts = {-33, 666, 19, -8, -50, 7, 4, -20, 55, 23};
		int N = nuts.length;
		
		NutsAndBolts task1 = new NutsAndBolts();
		task1.SortNutsAndBolts(nuts, bolts);
		
		System.out.println("Nuts:");
		for (int i = 0; i < N; i++)
			System.out.println(nuts[i]);
		
		System.out.println("Bolts:");
		for (int i = 0; i < N; i++)
			System.out.println(bolts[i]);
	}
}

Output:
Nuts:
-50
-33
-20
-8
4
7
19
23
55
666
Bolts:
-50
-33
-20
-8
4
7
19
23
55
666

============================================================================================================

public class SelectionInTwoSortedArrays 
{
	private static int Kth(int[] a, int[] b, int a_beg, int b_beg, int a_end, int b_end, int k)
	{
		if (a_beg == a_end) return b[b_beg + k];
		if (b_beg == b_end) return a[a_beg + k];
		
		int middle1 = (a_end - a_beg) / 2;
		int middle2 = (b_end - b_beg) / 2;
		
		if (middle1 + middle2 < k)
		{
			if (a[a_beg + middle1] > b[b_beg + middle2])
				return Kth(a, b, a_beg, b_beg + middle2 + 1, a_end, b_end, k - middle2 - 1);
			else 
				return Kth(a, b, a_beg + middle1 + 1, b_beg, a_end, b_end, k - middle1 - 1);
		}
		else
		{
			if (a[a_beg + middle1] > b[b_beg + middle2])
				return Kth(a, b, a_beg, b_beg, a_beg + middle1, b_end, k);
			else 
				return Kth(a, b, a_beg, b_beg, a_end, b_beg + middle2, k);
		}
	}
	
	private static int Kth(int[] a, int[] b, int k)
	{
		int a_beg = 0, b_beg = 0;
		int a_end = a.length, b_end = b.length;
		return Kth(a, b, a_beg, b_beg, a_end, b_end, k - 1);
	}
	
	public static void main(String[] args)
	{
	    int[] a = {1, 2, 4, 5, 7, 9};
		int[] b = {3, 6, 8, 10};
		int k = 7;
		
		System.out.print(Kth(a, b, k));
	}
}

Output:
7

=============================================================================================================

import java.util.Random;

public class DecimalDominants 
{
	private static int partition(int[] a, int lo, int hi)
	{
	    if (hi <= lo) return lo;
		int lt = lo, gt = hi;
		int v = a[lo];
		int i = lo;
		while (i <= gt)
		{
			if (a[i] < v) exch(a, lt++, i++);
			else if (a[i] > v) exch(a, i, gt--);
			else i++;
		}
		
		return i;
	}
	
	private static void check(int[] a, int k, int length)
	{
		int lo = 0, hi = a.length - 1, j = 0;
		while (hi > lo)
		{
		    j = partition(a, lo, hi);
	     	if (j < k) lo = j + 1;
		    else if (j > k) hi = j - 1;
			else break;
		}
		
		lo = 0;
		hi = a.length - 1;
		
		int cmp = a[j];
		int len = 1, x = j;
		while (j > lo)
			if (cmp == a[--j]) 
				len++;
			else break;
		
		j = x;
		while (j < hi)
			if (cmp == a[++j]) 
				len++;
			else break;
		
		if (len > length) System.out.println(a[x]);
	}
	
	public static void printDecimalDominants(int[] a)
	{
		shuffle(a);
		
		int beg = a.length / 20;
		int length = a.length / 10;
		for (int i = 0; i < 9; i++)
		{
			check(a, beg, length);
		}
	}
	
	private static void exch(int[] a, int i, int j)
	{
		int buf = a[i];
		a[i] = a[j];
		a[j] = buf;
	}
	
	private static void shuffle(int[] a)
	{
		int N = a.length;
		Random rand = new Random(); 
		
		for(int i = 1; i < N; i++)
			exch(a, i, rand.nextInt(i));
	}
	
	public static void main(String[] args)
	{
		int[] array = {0, 3, 2, 3, 2, 1, 2, 4, 5, 6, 1, 8, 10};
		printDecimalDominants(array);
	}
}

Output:
1
2
3
