public class Sum4 
{
	private int[] a;
	private int N;
	private int N_sqr;
	
	private int M;
	private int[] keys;
	
	public Sum4(int[] a)
	{
		N = a.length;
		this.a = new int[N];
		for (int i = 0; i < N; i++)
			this.a[i] = a[i];
		
		N_sqr = N * N;
		M = 2 * N_sqr;
		keys = new int[M];
		
		for (int i = 0; i < M; i++)
			keys[i] = -1;
	}
	
	public boolean collisions()
	{
		for (int i = 0; i < N - 1; i++)
			for (int j = i + 1; j < N; j++)
				if (put(a[i] + a[j])) return true;
		return false;
	}
	
	private int hash(int key) 
	{ 
		return (((Integer)key).hashCode() & 0x7fff) % M;
	}
	
	public boolean put(int key)
	{
		int i;
		for (i = hash(key); keys[i] != -1; i = (i+1) % M)
		    if (keys[i] == key) return true;
		keys[i] = key;
		return false;
	}
	
	public static void main(String[] args)
	{
		int[] array = {84386 ,84971 ,86233 ,86799 ,88324 ,88977 ,89781 ,90583 ,91467 ,92706 ,93767
				,94712 ,96325 ,97362 ,97877 ,98984 ,100334 ,100467 ,101951 ,103319 ,103623 ,104590 ,105808
				,106723 ,108344 ,108751 ,109616 ,110462 ,112366 ,112443 ,114014 ,115262 ,116216 ,116441
				,117499 ,118657 ,119515 ,120498 ,121690 ,123194 ,123646 ,124950 ,126395 ,126876 ,127847
				,129157 ,129606 ,130994 ,131812 ,133182 ,133773 ,134601 ,136038 ,136671 ,137763 ,139363
				,139496 ,140570 ,141672 ,142929 ,143797 ,145185 ,145646 ,147204 ,147911 ,148878 ,150134
				,150840 ,151652 ,152689 ,153579 ,155181 ,156283 ,157286 ,157601 ,159075 ,160069 ,160538
				,162382 ,163177 ,164246 ,164674 ,165462 ,166802 ,167898 ,169016 ,169869 ,170485 ,171796
				,172995 ,173557 ,175064 ,176242 ,176946 ,177743 ,178881 ,180285 ,180486 ,182302 ,182440
				,183972 ,185313 ,186391 ,186595 ,188311 ,188990 ,189676 ,191007 ,192385 ,192517 ,194200
				,194513 ,196279 ,196851 ,198334 ,199351 ,200086 ,200644 ,202290 ,202525 ,203713 ,204975
				,205928 ,207407 ,207791 ,208485 ,209443 ,211120 ,211555 ,212420 ,213718 ,214989 ,216405
				,216558 ,217863 ,219105 ,219846 ,220801 ,222298 ,223334 ,223713 ,225379 ,225513 ,226989
				,228172 ,228516 ,229824 ,231162 ,231822 ,232664 ,234294 ,235279 ,235834 ,236855 ,238360
				,239178 ,239594 ,241395 ,241592 ,242694 ,244327 ,244766 ,245668 ,247348 ,248316 ,248429
				,250033 ,251043 ,251915 ,252916 ,253669 ,255259 ,255911 ,257143 ,258179 ,259154 ,259673
				,260699 ,262161 ,262928 ,263510 ,264431 ,266070 ,266774 ,267988 ,269314 ,270272 ,271374
				,272069 ,272874 ,273978 ,275398 ,276333 ,276974 ,277842 ,278895 ,280270 ,281361 ,282104
				,282509 ,283963 ,285372 ,285778 ,286994 ,287713 ,288422 ,289972 ,290651 ,291920 ,293186
				,294365 ,294550 ,295585 ,296549 ,298349 ,298534 ,299515 ,300955 ,302019 ,303229 ,303878
				,304654 ,305779 ,306510 ,308136 ,308425 ,309901 ,311204 ,312245 ,312479 ,313944 ,314778
				,316401 ,317011 ,318292 ,318927 ,319721 ,321139 ,321848 ,83723 ,82310 ,81828 ,80262 ,79821
				,77995 ,77509 ,76078 ,75555 ,74416 ,73292 ,72028 ,71219 ,70493 ,69039 ,68631 ,67398 ,65931
				,65186 ,64182 ,63452 ,62325 ,61752 ,60228 ,58852 ,58840 ,57804 ,56303 ,55572 ,54579 ,53009
				,52039 ,51266 ,50081 ,49082 ,48508 ,47253 ,45891 ,45751 ,44648 ,43107 ,42099 ,40972 ,39875
				,38935 ,38228 ,37344 ,36237 ,35382 ,34277 ,33639 ,32351 ,31015 ,30580 ,29252 ,28234 ,27181
				,26415 ,25207 ,24569 ,23626 ,22253 ,21815 ,20027 ,18849 ,18627 ,16852 ,16752 ,15560 ,14067
				,13475 ,12693 ,11793 ,10183 ,9695 ,8722 ,7499 ,5915 ,5008 ,4416 ,3281 ,1945 ,907 ,136 ,-497
				,-1570 ,-2930 ,-3873 ,-4947 ,-6095 ,-6706 ,-7851 ,-8902 ,-9917 ,-10201 ,-11859 ,-12899
				,-13471 ,-14313 ,-15433 ,-16262 ,-17449 ,-18489 ,-19375 ,-20760 ,-21816 ,-22489 ,-23268
				,-25149 ,-26144 ,-27123 ,-27309 ,-28581 ,-29566 ,-30638 ,-31938 ,-32456 ,-33995 ,-34679
				,-35420 ,-36208 ,-37359 ,-38923 ,-39953 ,-40937 ,-41840 ,-42226 ,-43671 ,-44190 ,-46129
				,-46513 ,-47803 ,-48736 ,-49901 ,-50193 ,-51232 ,-52555 ,-53351 ,-54535 ,-55161 ,-56804
				,-57586 ,-58565 ,-59470 ,-60568 ,-61403 ,-62560 ,-64107 ,-65105 ,-65609 ,-66966 ,-67369
				,-68380 ,-69740 ,-70929 ,-71893 ,-72753 ,-73425 ,-75073 ,-75572 ,-76429 ,-77424 ,-78200
				,-79562 ,-80468 ,-81453 ,-83027 ,-83289 ,-84188 ,-85994 ,-86790 ,-87571 ,-89144 ,-89960
				,-90980 ,-91575 ,-92173 ,-93419 ,-94975 ,-95696 ,-96241 ,-97314 ,-98580 ,-99757 ,-101101
				,-101291 ,-102838 ,-103540 ,-104779 ,-105810 ,-106538 ,-107759 ,-108755 ,-109271 ,-110259
				,-111331 ,-112772 ,-114125 ,-114912 ,-115175 ,-116464 ,-117979 ,-118476 ,-119286 ,-120603
				,-122052 ,-123121 ,-124036 ,-124199 ,-125905 ,-126704 ,-128083 ,-129052 ,-129528 ,-130277
				,-131340 ,-132319 ,-133207 ,-134423 ,-135969 ,-136514 ,-137816 ,-138664 ,-139476 ,-140236
				,-141243 ,-142356 ,-143545 ,-145093 ,-145840 ,-146191 ,-147317 ,-148762 ,-149953 ,-150860
				,-151524 ,-152242 ,-153651 ,-154843 ,-155352 ,-156403 ,-157497 ,-158893 ,-159842 ,-160774
				,-162001 ,-162644 ,-163674 ,-164684 ,-165237 ,-166273 ,-167616 ,-168340 ,-169375 ,-170975
				,-171727 ,-172381 ,-173343 ,-174912 ,-175927 ,-176675 ,-178116 ,-178482 ,-179305 ,-181119
				,-181750 ,-182474 ,-183475 ,-184865 ,-185657 ,-186980 ,-188008 ,-188283 ,-189369 ,-190812
				,-192104 ,-192803 ,-193751 ,-194741 ,-195578 ,-196650 ,-197848 ,-198263 ,-199965 ,-200979
				,-201348 ,-202429 ,-203731 ,-204761 ,-205384 ,-206564 ,-207820 ,-208666 ,-209396 ,-210581
				,-211941 ,-212761 ,-213326 ,-214563 ,-215790 ,-216476 ,-217330 ,-218864 ,-219567 ,-220166
				,-221810 ,-222831 ,-223969 ,-224919 ,-225215 ,-226270 ,-227217 ,-229149 ,-230108 ,-230980
				,-232060 ,-233077 ,-233209 ,-234868 ,-235429 ,-236548 ,-237913 ,-238723 ,-239929 ,-240589
				,-242140 ,-242989 ,-243949 ,-244598 ,-245542 ,-246497 ,-247841 ,-248711 ,-249779 ,-250428
				,-251299 ,-252245 ,-253570 ,-254748 ,-255442 ,-256613 ,-258005 ,-258289 ,-259266 ,-260975
				,-261862 ,-262166 ,-263442 ,-264372 ,-265827 ,-266256 ,-267840 ,-268755 ,-269687 ,-270336
				,-271812 ,-272898 ,-273856 ,-274934 ,-275855 ,-276274 ,-277273 ,-278609 ,-279584 ,-280589
				,-281398 ,-282300 ,-283590 ,-284278 ,-285300 ,-286646 ,-287590 ,-288235 ,-289518 ,-290634
				,-291755 ,-292463 ,-294025 ,-294288 ,-295442 ,-296525 ,-298110 ,-299118 ,-299954 ,-300369
				,-301861 ,-302801 ,-303552 ,-304539 ,-305235 ,-306507 ,-307917 ,-308359 ,-309492 ,-310936
				,-311703 ,-312428 ,-313736 ,-314475 ,-315428 ,-317068 ,-317221 ,-318225 ,-319345 ,-320643
				,-321324 ,-322830 ,-323934 ,-324446 ,-325882 ,-326246 ,-327944 ,-328651 ,-330038 ,-330642
				,-331173 ,-332450 ,-333856 ,-334961 ,-335873 ,-336845 ,-337883 ,-338353 ,-339892 ,-340692
				,-341858 ,-342488 ,-344139 ,-345070 ,-345773 ,-346814 ,-347547 ,-348412 ,-349657 ,-350896
				,-351527 ,-352922 ,-353652 ,-354937 ,-355879 ,-356282 ,-357445 ,-358156 ,-359168 ,-360156
				,-361271 ,-362455 ,-363870 ,-364643 ,-366051 ,-366780 ,-367971 ,-368196 ,-369795 ,-370580
				,-371200 ,-372858 ,-373799 ,-375087 ,-376007 ,-377040 ,-377569 ,-378465 ,-379517 ,-380489
				,-381563 ,-382642 ,-383452 ,-384492 ,-385242 ,-386822 ,-388012 ,-389046 ,-390109 ,-390318
				,-391919 ,-392627 ,-393789 ,-394954 ,-395456 ,-397111 ,-397915 ,-398934 ,-399906 ,-400468
				,-401486 ,-402703 ,-403212 ,-405055 ,-405640 ,-407016 ,-407607 ,-409142 ,-409272 ,-410871
				,-411215 ,-412655 ,-414151 ,-414168 ,-415581 ,-416261 ,-418050 ,-418386 ,-419455 ,-420894
				,-421486 ,-422913 ,-423488 ,-424971 ,-425164 ,-427006 ,-427433 ,-429018 ,-430035 ,-430427
				,-431659 ,-432272 ,-433818 ,-434686 ,-436005 ,-436446 ,-437569 ,-438535 ,-439712 ,-440908
				,-441958 ,-442245 ,-443181 ,-445034 ,-445338 ,-446591 ,-447525 ,-448248 ,-449976 ,-451081
				,-451613 ,-452255 ,-453421 ,-455119 ,-455391 ,-456969 ,-457456 ,-458616 ,-460011 ,-461137
				,-461863 ,-462592 ,-463433 ,-464558 ,-465169 ,-466199 ,-467231 ,-468667 ,-469413 ,-470328
				,-471348 ,-473029 ,-473719 ,-474326 ,-475754 ,-476919 ,-478103 ,-478475 ,-479856 ,-480195
				,-481792 ,-482326 ,-483290};
		
		System.out.println("Array size is " + array.length);
		Sum4 last_task = new Sum4(array);
		if (last_task.collisions())
			System.out.println("There are some collisions");
		else System.out.println("No collisions");
	}
}

Output:
Array size is 807
There are some collisions

====================================================================================================

1) Then everything will work fine with inserting until you get a hash collision. And then you won't be able to compare 2 equal OlympicAthlete, even they are equal - equality test will work just for exactly the same object. And the search will also be broken. That will lead to a fast database clustering.
2) Then your hash will depend on the memory pointer exclusively. What will happen is equal objects will receive different hashes which will sequentially lead to terrible search mistakes.
3) A compile-time error, since the hash map for the generic type would not be created.