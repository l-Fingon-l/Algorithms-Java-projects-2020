public class Queue2Stacks<Item>
{
	private Stack in;
	private Stack out;
	private int N;
	
	private class Stack
	{
		private Item[] array;
		private int N;
		
		public Stack()
		{
			array = (Item[]) new Object[1];
		}
		
		private void resize(int size)
		{
			Item[] old = array;
			array = (Item[]) new Object[size];
			for (int i = 0; i < N; i++) array[i] = old[i];
			old = null;
		}
		
		public void push(Item n)
		{
			if (N == array.length) resize(2 * array.length);
			array[N++] = n;
		}
		
		public Item pop()
		{
			if (N < array.length / 4) resize(array.length / 2);
			Item item = array[--N];
			array[N] = null;
			return item;
		}
	}
	
	public Queue2Stacks()
	{
		in = new Stack();
		out = new Stack();
		N = 0;
	}
	
	public void enqueue(Item item)
	{
		in.push(item);
		N++;
	}
	
	public Item dequeue()
	{
		for (int i = 0; i < N; i++)
			out.push(in.pop());
		
		N--;
		Item item =  out.pop();
		
		for (int i = 0; i < N; i++)
			in.push(out.pop());
		
		return item;
	}
	
	public static void main(String[] args)
	{
		Queue2Stacks<Integer> task1 = new Queue2Stacks<>();
		task1.enqueue(10);
		task1.enqueue(2);
		task1.enqueue(17);
		task1.dequeue();
		task1.enqueue(18);
		task1.enqueue(31);
		task1.enqueue(1);
		task1.enqueue(98);
		task1.dequeue();
		System.out.print(task1.dequeue());
	}
}


===========================================================================================================
public class StackWithMax 
{
	private double[] array;
	private StackWithMax Maxs;
	private int N;
	private double max;
	private boolean inner;
	
	public StackWithMax()
	{
		array = new double[1];
		inner = false;
		Maxs = new StackWithMax(true);
	}
	
	public StackWithMax(boolean state)
	{
		array = new double[1];
		inner = state;
	}
	
	private void resize(int size)
	{
		double[] old = array;
		array = new double[size];
		for (int i = 0; i < N; i++) array[i] = old[i];
		old = null;
	}
	
	public void push(double n)
	{
		if (N == array.length) resize(2 * array.length);
		array[N++] = n;
		if (!inner)
			if (n > max) 
			{
				max = n;
				Maxs.push(n);
			}
	}
	
	public double pop()
	{
		if (N-- < array.length / 4) resize(array.length / 2);
		double item = array[N];
		if (!inner) 
			if (item == max)
			{
				Maxs.pop();
				max = Maxs.pop();
				Maxs.push(max);
			}
		return item;
	}
	
	public double returnTheMaximum()
	{
		return max;
	}
	
	public static void main(String[] args)
	{
		StackWithMax task2 = new StackWithMax();
		task2.push(10);
		task2.push(2);
		task2.push(17);
		task2.pop();
		task2.push(18);
		task2.push(31);
		task2.push(1);
		task2.push(98);
		task2.pop();
		System.out.print(task2.returnTheMaximum());
	}
}

=======================================================================================================

The reason for it is that the arrays are being checked for the correctness on the bytecode (run-time) level and so the compiler does have to know about the type of the element after the compilation process. 
And the generics in Java does not save the original container type after the compilation process - it is being totally cleaned right on the compilation level. If the compiler would accept the generic array creation then such situation might occur where the array:
- had been created (int);
- then was assigned to a reference of a type of a higher hierarchy (double);
- an attempt to assign a double value to one of the elements (it's totally fine after the generics);
- at compilation time the origin of the 1st type is deleted;
- at the run-time there are no type checks since the origin of the array was changed before;
- heap corruption.