import edu.princeton.cs.algs4.DirectedEdge;
import edu.princeton.cs.algs4.EdgeWeightedDigraph;
import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.MinPQ;
import edu.princeton.cs.algs4.Stack;
import edu.princeton.cs.algs4.StdOut;

public class MonotonicSP
{
	private EdgeWeightedDigraph G;
	private double[] distTo;
	private DirectedEdge[] edgeTo;
	private int s;
	
	private class triple implements Comparable<triple>
	{
		public DirectedEdge edge;
		public double length;
		public int m; // monotonic 0 = decreasing, 1 = increasing, -1 = yet unknown
		public triple(DirectedEdge edge, double length, int m) { this.edge = edge; this.length = length; this.m = m; }
		public int compareTo(triple that) {
	        return Double.compare(this.length, that.length);
		}
	}
	
	public MonotonicSP(EdgeWeightedDigraph G_, int s)
	{
		G = G_;
		validateVertex(s);
		this.s = s;
		distTo = new double[G.V()];
		edgeTo = new DirectedEdge[G.V()];
		MinPQ<triple> pq = new MinPQ<>();
		
		for (DirectedEdge e: G.adj(s))
			pq.insert(new triple(e, e.weight(), -1));
		edgeTo[s] = null;
		
		while (!pq.isEmpty())
		{
			triple x = pq.delMin();
			if (edgeTo[x.edge.to()] != null) continue;
			distTo[x.edge.to()] = x.length;
			edgeTo[x.edge.to()] = x.edge;

			for (DirectedEdge e: G.adj(x.edge.to()))
				if (edgeTo[e.to()] == null)
				{
					int m;
					if (e.weight() < x.edge.weight()) m = 0;
					else if (e.weight() > x.edge.weight()) m = 1;
					else continue;
					
					if (x.m == m || x.m == -1) 
						pq.insert(new triple(e, x.length + (int)e.weight(), m));
					else continue;
				}
		}
	}
	
	public Iterable<DirectedEdge> ShortestPathTo(int v)
	{
		validateVertex(v);
		Stack<DirectedEdge> path = new Stack<>();
		for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()])
			path.push(e);
		
		return path;
	}
	
	public double distTo(int v)
	{
		validateVertex(v);
		return distTo[v];
	}
	
	public void printShortestPath(int v)
	{
		validateVertex(v);
		if (edgeTo[v] == null)
		{
			System.out.println("There is no monotonic path to " + v);
			return;
		}
			
		StdOut.printf("%d to %d (%.2f): ", s, v, distTo(v));
		for (DirectedEdge e: ShortestPathTo(v))
			StdOut.print(e.from() + "->" + e.to() + "" + String.format("%5.2f", e.weight()) + "  ");
		StdOut.println();
	}
	
	private void validateVertex(int v) {
        if (v < 0 || v >= G.V())
            throw new IllegalArgumentException("vertex " + v + " is not between 0 and " + (G.V()-1));
    }
	
	public static void main(String[] args)
	{
		In in = new In(args[0]);
		EdgeWeightedDigraph G = new EdgeWeightedDigraph(in);
		MonotonicSP SP = new MonotonicSP(G, Integer.parseInt(args[1]));
		SP.printShortestPath(Integer.parseInt(args[2]));
	}
}

And an example of input data:
5
7
0 1 2
0 2 4
1 2 1
1 4 7
2 3 3
2 4 5
3 4 3

The result: 
0 to 4 (9.00): 0->1 2.00  1->4 7.00  
While the simple shortest path would be: 
A to E (8.00): A->B 2.00  B->C 1.00  C->E 5.00  
============================================================================================================
import edu.princeton.cs.algs4.DirectedEdge;
import edu.princeton.cs.algs4.EdgeWeightedDigraph;
import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.IndexMinPQ;
import edu.princeton.cs.algs4.Stack;
import edu.princeton.cs.algs4.StdOut;

public class SecondSP // this one is a slight modification of Sedgewick and Wayne's implementation of Dijkstra's algorithm
{
    private double[] distTo;          // distTo[v] = distance  of shortest s->v path
    private double[] distTo2;          // distTo[v] = distance  of shortest s->v path2
    private DirectedEdge[] edgeTo;    // edgeTo[v] = last edge on shortest s->v path
    private DirectedEdge[] edgeTo2;    // edgeTo[v] = last edge on shortest s->v path2
    private IndexMinPQ<Double> pq;    // priority queue of vertices

    public SecondSP(EdgeWeightedDigraph G, int s) 
    {
        for (DirectedEdge e : G.edges()) {
            if (e.weight() < 0)
                throw new IllegalArgumentException("edge " + e + " has negative weight");
        }

        distTo = new double[G.V()];
        distTo2 = new double[G.V()];
        edgeTo = new DirectedEdge[G.V()];
        edgeTo2 = new DirectedEdge[G.V()];

        validateVertex(s);

        for (int v = 1; v < G.V(); v++)
            distTo[v] = distTo2[v] = Double.POSITIVE_INFINITY;
        distTo[s] = distTo2[s] = 0.0;

        pq = new IndexMinPQ<Double>(G.V());
        pq.insert(s, distTo[s]);
        while (!pq.isEmpty()) {
            int v = pq.delMin();
            for (DirectedEdge e : G.adj(v))
                relax(e);
        }
    }

    private void relax(DirectedEdge e) 
    {
        int v = e.from(), w = e.to();
        if (distTo[w] > distTo[v] + e.weight()) 
        {
            if (distTo2[w] == Double.POSITIVE_INFINITY)
            {
            	distTo2[w] = distTo[v] + e.weight();
                edgeTo2[w] = e;
            }
            else
            {
            	distTo2[w] = distTo[w];
            	edgeTo2[w] = edgeTo[w];
            }
            distTo[w] = distTo[v] + e.weight();
            edgeTo[w] = e;
            	
            if (pq.contains(w)) pq.decreaseKey(w, distTo[w]);
            else                pq.insert(w, distTo[w]);
        }
        else if (distTo[w] == distTo2[w] || distTo2[w] > distTo[v] + e.weight())
        {
        	distTo2[w] = distTo[v] + e.weight();
        	edgeTo2[w] = e;
        	if (!pq.contains(w)) pq.insert(w, distTo[w]);
        }
    }
    
    public double distTo(int v) {
        validateVertex(v);
        return distTo2[v];
    }

    public boolean hasSecondPathTo(int v) {
        validateVertex(v);
        if (distTo2[v] == distTo[v]) 
        	return false;
        return distTo[v] < Double.POSITIVE_INFINITY;
    }

    public Iterable<DirectedEdge> pathTo(int v) 
    {
        validateVertex(v);
        if (!hasSecondPathTo(v)) return null;
        Stack<DirectedEdge> path = new Stack<DirectedEdge>();
        for (DirectedEdge e = edgeTo2[v]; e != null; e = edgeTo2[e.from()]) {
            path.push(e);
        }
        return path;
    }

    private void validateVertex(int v) {
        int V = distTo.length;
        if (v < 0 || v >= V)
            throw new IllegalArgumentException("vertex " + v + " is not between 0 and " + (V-1));
    }

    public static void main(String[] args) 
    {
        In in = new In(args[0]);
        EdgeWeightedDigraph G = new EdgeWeightedDigraph(in);
        int s = Integer.parseInt(args[1]);

        // compute second shortest paths
        SecondSP sp = new SecondSP(G, s);

        // print second shortest path
        for (int t = 0; t < G.V(); t++) {
            if (sp.hasSecondPathTo(t)) {
                StdOut.printf("%d to %d (%.2f)  ", s, t, sp.distTo(t));
                for (DirectedEdge e : sp.pathTo(t)) {
                    StdOut.print(e + "   ");
                }
                StdOut.println();
            }
            else {
                StdOut.printf("%d to %d         no 2nd path\n", s, t);
            }
        }
    }
}

And an example of input data:
5
6
0 1 2
0 2 4
1 2 1
1 4 7
2 3 3
2 4 5
3 4 3

The result: 
0 to 0         no 2nd path
0 to 1         no 2nd path
0 to 2 (4.00)  0->2  4.00   
0 to 3         no 2nd path
0 to 4 (9.00)  0->1  2.00   1->4  7.00   
============================================================================================================
import edu.princeton.cs.algs4.DirectedEdge;
import edu.princeton.cs.algs4.EdgeWeightedDigraph;
import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.IndexMinPQ;
import edu.princeton.cs.algs4.Stack;
import edu.princeton.cs.algs4.StdOut;

public class SkippableSP // this one is a slight modification of Sedgewick and Wayne's implementation of Dijkstra's algorithm
{
	private double[] distTo;          // distTo[v] = distance  of shortest s->v path
	private double[] max;
    private DirectedEdge[] edgeTo;    // edgeTo[v] = last edge on shortest s->v path
    private IndexMinPQ<Double> pq;    // priority queue of vertices

    public SkippableSP(EdgeWeightedDigraph G, int s) 
    {
        distTo = new double[G.V()];
        max = new double[G.V()];
        edgeTo = new DirectedEdge[G.V()];

        validateVertex(s);

        for (int v = 1; v < G.V(); v++)
            distTo[v] = Double.POSITIVE_INFINITY;

        pq = new IndexMinPQ<>(G.V());
        pq.insert(s, distTo[s]);
        while (!pq.isEmpty()) {
            int v = pq.delMin();
            for (DirectedEdge e : G.adj(v))
                relax(e);
        }
    }

    private void relax(DirectedEdge e)
    {
        int w = e.to();
        
        if (distTo[w] > distTo(e)) 
        {
            distTo[w] = distTo(e);
            edgeTo[w] = e;
            max[w] = bigger(max[w], e.weight());
            if (pq.contains(w)) pq.decreaseKey(w, distTo[w]);
            else                pq.insert(w, distTo[w]);
        }
    }
    
    private double distTo(DirectedEdge e)
    {
    	int v = e.from();
    	if (max[v] > e.weight())
    		return distTo[v] + e.weight() ;
    	else return distTo[v] + max[v];
    }
    
    public double distTo(int v)
    {
    	 validateVertex(v);
         return distTo[v];
    }
    
    private double bigger(double x, double y)
    {
    	if (x > y) return x;
    	else return y;
    }
	
    private void validateVertex(int v) 
    {
        int V = distTo.length;
        if (v < 0 || v >= V)
            throw new IllegalArgumentException("vertex " + v + " is not between 0 and " + (V-1));
    }
    
    public boolean hasPathTo(int v) 
    {
        validateVertex(v);
        return distTo[v] < Double.POSITIVE_INFINITY;
    }
    
    public Iterable<DirectedEdge> pathTo(int v) 
    {
        validateVertex(v);
        if (!hasPathTo(v)) return null;
        Stack<DirectedEdge> path = new Stack<DirectedEdge>();
        boolean marked = false;
        for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]) 
        {
        	if (!marked)
        		if (e.weight() == max[v])
        		{
        			marked = true;
        			path.push(new DirectedEdge(e.from(), e.to(), 0));
        		}
        		else path.push(e);
        	else path.push(e);
        }
        return path;
    }
	
	public static void main(String[] args) 
	{
		In in = new In(args[0]);
        EdgeWeightedDigraph G = new EdgeWeightedDigraph(in);
        int s = Integer.parseInt(args[1]);

        // compute skippable shortest paths
        SkippableSP sp = new SkippableSP(G, s);

        // print skippable shortest path
        int t = Integer.parseInt(args[2]);
        if (sp.hasPathTo(t)) 
        {
            StdOut.printf("%d to %d (%.2f)  ", s, t, sp.distTo(t));
            for (DirectedEdge e : sp.pathTo(t)) 
            {
                StdOut.print(e + "   ");
            }
            StdOut.println();
        }
        else 
        {
            StdOut.printf("%d to %d         no skippable path\n", s, t);
        }
	}
}

And an example of input data:
5
7
0 1 2
0 2 4
1 2 1
1 4 7
2 3 3
2 4 5
3 4 3

The result: 
0 to 4 (2.00)  0->1  2.00   1->4  0.00  