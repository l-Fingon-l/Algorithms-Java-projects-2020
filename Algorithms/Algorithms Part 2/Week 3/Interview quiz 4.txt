import edu.princeton.cs.algs4.EdgeWeightedDigraph;
import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.DirectedEdge;
import edu.princeton.cs.algs4.Stack;
import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.MaxPQ;

public class FattestPath 
{
	private final EdgeWeightedDigraph G;
	private DirectedEdge[] edgeTo;
	private double[] fat;
	private final int s;
	private final int t;
	
	private class edge implements Comparable<edge>
	{
		public double fat;
		public DirectedEdge edge;
		public edge(DirectedEdge edge, double fat) { this.edge = edge; this.fat = fat; }
		public int compareTo(edge that) {
	        return Double.compare(this.fat, that.fat);
		}
	}
	
	public FattestPath(EdgeWeightedDigraph G, int s, int t)
	{
		this.G = G;
		validateVertex(s);
		validateVertex(t);
		this.t = t;
		this.s = s;
		edgeTo = new DirectedEdge[G.V()];
		fat = new double[G.V()];
		
		MaxPQ<edge> pq = new MaxPQ<>();
		for (DirectedEdge e: G.adj(s))
			pq.insert(new edge(e, e.weight()));
		
		while (!pq.isEmpty())
		{
			edge x = pq.delMax();
			if (edgeTo[x.edge.to()] != null) continue;
			fat[x.edge.to()] = x.fat;
			edgeTo[x.edge.to()] = x.edge;
			if (x.edge.to() == t) break;

			for (DirectedEdge e: G.adj(x.edge.to()))
				if (edgeTo[e.to()] == null)
					pq.insert(new edge(e, Math.min(x.fat, e.weight())));
		}
	}
	
	public Iterable<DirectedEdge> path()
	{
		Stack<DirectedEdge> path = new Stack<>();
		for (DirectedEdge e = edgeTo[t]; e != null; e = edgeTo[e.from()])
			path.push(e);
		
		return path;
	}
	
	public void printFattestPath()
	{
		if (edgeTo[t] == null)
		{
			System.out.println("There is no fattest path to " + t);
			return;
		}
			
		StdOut.printf("%d to %d (%.2f): ", s, t, fat[t]);
		for (DirectedEdge e: path())
			StdOut.print(e.from() + "->" + e.to() + "" + String.format("%5.2f", e.weight()) + "  ");
		StdOut.println();
	}
	
	private void validateVertex(int v) {
        if (v < 0 || v >= G.V())
            throw new IllegalArgumentException("vertex " + v + " is not between 0 and " + (G.V()-1));
    }
	
	public static void main(String[] args)
	{
		In in = new In(args[0]);
		EdgeWeightedDigraph G = new EdgeWeightedDigraph(in);
		FattestPath FP = new FattestPath(G, Integer.parseInt(args[1]), Integer.parseInt(args[2]));
		FP.printFattestPath();
	}
}

And an example of input data:
5
7
0 1 2
0 2 4
1 2 1
1 4 7
2 3 3
2 4 5
3 4 3

The result: 0 to 4 (4.00): 0->2 4.00  2->4 5.00  
============================================================================================================
Formal proof:
1) Draw a bipartite graph with edges man-woman having infinite capacity, s-man and woman-t having capacity 1. 
Use Ford-Fulkerson (FF). Let's call B-vertices those already connected to t (in maxflow) and A-vertices those 
not yet connected.
2) At any stage finding a new augmenting path and the subsequent augmentation increases the value of a flow v
by 1. Since n is finite, then FF will terminate.
3) Now we have to prove, there will also be an augmentation path at any stage:
    a) if a B-vertex is not connected somehow (locked) to some right (left) A-vertice, 
      then it can not be connected to some left (right) A-vertice, because: if one side is "locked" 
      then it has E edges pointing from it. Then another side has to have exactly E edges pointing from 
      it to the first side. No edges may point to any other vertice. One locked side requires another 
      side to being locked as well.
    b) thus, a B-vertice where we get by a (right\left)A-B edge is unlocked and therefore it is connected 
      to another (left\right) A-vertice. And this way is an augmenting path.
    c) if we get an A-A edge than it is already an augmenting path.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Colourfully illustrated proof: http://www.diablo1.ru/images/ldd2/iz4hv3r1ny.png
============================================================================================================
import java.util.NoSuchElementException;
import edu.princeton.cs.algs4.Graph;
import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.Stack;

public class MaximumWeightClosure
{
	private Graph G;
	private int[] subset;
	private int[] weight;
	private int max = 0;
	private int max_id = -1;
	
	public MaximumWeightClosure(In in)
	{
		// init
		readGraph(in);
		subset = new int[G.V()];
		for (int i = 0; i < G.V(); i++)
			subset[i] = -1;
		
		// calculation of the sets
		for (int i = 0; i < G.V(); i++)
			if (subset[i] != -1)
			{
				DFS(i, i);
				if (weight[i] > max) 
				{
					max = weight[i];
					max_id = i;
				}
			}
	}
	
	private void DFS(int v, int source)
	{
		subset[v] = source;
		for (int w: G.adj(v))
			if (subset[w] != -1)
			{
				DFS(w, source);
				weight[source] += weight[w];
			}	
	}
	
	private void readGraph(In in)
	{
		if (in == null) throw new IllegalArgumentException("argument is null");
		int V = in.readInt();
		if (V < 0) throw new IllegalArgumentException("Number of vertices must be nonnegative");
		G = new Graph(V);
		weight = new int[V];
		try {
            int E = in.readInt();
            if (E < 0) throw new IllegalArgumentException("number of edges in a Graph must be nonnegative");
            for (int i = 0; i < E; i++) {
                int v = in.readInt();
                int w = in.readInt();
                weight[i] = in.readInt();
                validateVertex(v);
                validateVertex(w);
                G.addEdge(v, w); 
            }
        }
        catch (NoSuchElementException e) {
            throw new IllegalArgumentException("invalid input format in Graph constructor", e);
        }
	}
	
	private void validateVertex(int v) {
        if (v < 0 || v >= G.V())
            throw new IllegalArgumentException("vertex " + v + " is not between 0 and " + (G.V()-1));
    }
	
	public Iterable<Integer> MaxSubset()
	{
		Stack<Integer> set = new Stack<>();
		for (int i = 0; i < G.V(); i++)
			if (subset[i] == max_id)
				set.push(i);
		
		return set;
	}
}
