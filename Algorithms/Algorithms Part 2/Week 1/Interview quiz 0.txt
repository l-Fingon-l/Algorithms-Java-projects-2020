import edu.princeton.cs.algs4.Graph;
import java.util.Stack;
import edu.princeton.cs.algs4.In;
import java.util.Iterator;

public class NonrecursiveDFS 
{
	private boolean[] marked;
	private int count;
	s
	public NonrecursiveDFS (Graph G, int s)
	{
		marked = new boolean[G.V()];
		validateVertex(s);
		
		Stack<Layer> stack = new Stack<Layer>(); 
		stack.push(new Layer(G.adj(s)));
		marked[s] = true;
		
		while (!stack.isEmpty())
		{
			if (!stack.lastElement().adj.hasNext())
			{
				stack.pop();
				count++;
				continue;
			}
			
			s = stack.lastElement().adj.next();
			validateVertex(s);
			
			if (!marked[s])
			{
				marked[s] = true;
				stack.push(new Layer(G.adj(s)));
			}
		}
	}
	
	private class Layer
	{
		public Iterator<Integer> adj;
		public Layer(Iterable<Integer> adjacent)
		{
			adj = adjacent.iterator();
		}
	}
	
	public boolean marked (int v)
	{
		validateVertex(v);
		return marked[v];
	}
	
	public int count()
	{
		return count;
	}
	
	private void validateVertex (int v)
	{
		int V = marked.length;
		if (v < 0 || v >= V)
			throw new IllegalArgumentException("vertex " + v + " is not between 0 and " + (V - 1));
	}
	
	
	public static void main(String[] args)
	{
		In in = new In(args[0]);
		Graph G = new Graph(in);
		int s = Integer.parseInt(args[1]);
		NonrecursiveDFS dfs = new NonrecursiveDFS(G, s);
		for (int v = 0; v < G.V(); v++)
			if (dfs.marked(v))
				System.out.println(v + " ");
		System.out.println();
	}
}


The tinyG.txt file taken from the 
https://algs4.cs.princeton.edu/41graph/tinyG.txt

And an example of input data:
tinyG.txt 9

The result: 
9 
10 
11 
12 

====================================================================================================
import java.util.Random;
import edu.princeton.cs.algs4.Graph;
import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.Queue;

public class SimpleGraphTraversal 
{
	public boolean[] marked;
	private int[] edgeTo;
	private int beg;
	private int d = -1; // diameter
	
	public SimpleGraphTraversal (Graph G)
	{
		Random rand = new Random(); 
		int s = rand.nextInt(G.V());
		
		marked = new boolean[G.V()];
		edgeTo = new int[G.V()];
		int beg_ = bfs(G, s);
		marked = new boolean[G.V()];
		edgeTo = new int[G.V()];
		beg = bfs(G, beg_);
	}
	
	private int bfs (Graph G, int s)
	{
		Queue<Integer> q = new Queue<Integer>();
		q.enqueue(s);
		marked[s] = true;
		edgeTo[s] = s;
		int end = s;
		while(!q.isEmpty())
		{
			int v = q.dequeue();
			for (int w: G.adj(v))
			{
				if (!marked[w])
				{
					q.enqueue(w);
					end = w;
					marked[w] = true;
					edgeTo[w] = v;
				}
			}
		}
		return end;
	}
	
	public void Diameter()
	{
		int i = beg, way = 0;
		while (i != edgeTo[i])
		{
			System.out.print(i + " - ");
			i = edgeTo[i];
			way++;
		}
		System.out.println(i + ".");
		d = way;
	}
	
	public int Centre()
	{
		int way = 0, i = beg; // getting the length
		if (d != -1) way = d / 2;
		else 
		{
			while (i != edgeTo[i])
			{
				i = edgeTo[i];
				way++;
			}
			i = beg;
			way /= 2;
		}
		
		while (way > 0) // getting to the centre
		{
			i = edgeTo[i];
			way--;
		}
		
		return i;
	}
	
	public static void main(String[] args)
	{
		In in = new In(args[0]);
		Graph G = new Graph(in);
		SimpleGraphTraversal sgt = new SimpleGraphTraversal(G);
		for (int v = 0; v < G.V(); v++)
			if (sgt.marked[v])
				System.out.println(v + " ");
		System.out.println();
		sgt.Diameter();
		System.out.println("The centre is at: " + sgt.Centre());
	}
}

And an example of input data:
19
18
0 2
2 1
2 6
2 3
3 4
5 6
10 6
11 6
6 7
7 8
8 9
7 16
7 15
16 17
17 18
7 13
12 13
13 14

Result: 
4 - 3 - 2 - 6 - 7 - 16 - 17 - 18.
The centre is at: 7.

===========================================================================================================
~ Had a graph had a single vertex with an odd degree, then would that mean it certainly had an edge, not used in a cycle. As you get to the vertex by an edge, you need another one to get out. And there will always be a pair for an any edge leading to a vertex. So the only option for a vertex with an odd degree is when at least one of the edges has not been used in a cycle. What means, there is no Euler cycle then. 
Regarding the second part of a question: when all the vertices have an even degree, they have exactly one way out of the graph after coming in while cycling. What means, the graph has an Euler cycle. ~
~~~~~~~~~~~~~~~~~~~~~~~
import edu.princeton.cs.algs4.Graph;
import edu.princeton.cs.algs4.In;
import java.util.Stack;
import java.util.Vector;

public class EulerCycle 
{
	private Vector<Integer>[] adj;
	private int[] edge_counter;
	private boolean isEulerian = true;
	
	public EulerCycle(Graph G) 
	{
		int V = G.V(), degree = 0;
		adj = new Vector[V];
		edge_counter = new int[V];
		for (int i = 0; i < V; i++)
		{
			adj[i] = new Vector<Integer>();
			for (int w: G.adj(i))
				adj[i].add(w);
			degree = G.degree(i);
			if (degree % 2 == 1) 
			{
				isEulerian = false;
				break;
			}
			edge_counter[i] = degree;
		}
	}
	
	public boolean isEulerian()
	{
		return isEulerian;
	}
	
	public void printEulerianCycle()
	{
		if (!isEulerian)
		{
			System.out.println("The graph does not have an Eulerian cycle.");
			return;
		}
		
		Stack<Integer> path = new Stack<Integer>();
		Stack<Integer> cycle = new Stack<Integer>();
		int curr = 0, next = 0;
		path.add(0);
		
		while (!path.isEmpty())
		{
			if (edge_counter[curr] != 0)
			{
				path.add(curr);
				next = adj[curr].firstElement();
				
				adj[curr].removeElementAt(0);
				adj[next].removeElement(curr);
				edge_counter[curr]--;
				edge_counter[next]--;
				
				curr = next;
			}
			else
			{
				cycle.add(curr);
				curr = path.lastElement();
				path.pop();
			}
		}
		
		for (int i = cycle.size() - 1; i > -1; i--)
		{
			System.out.print(cycle.pop());
			if (!cycle.isEmpty())
				System.out.print(" - ");
		}
	}

	public static void main(String[] args)
	{
		In in = new In(args[0]);
		Graph G = new Graph(in);
		
		EulerCycle EC = new EulerCycle(G);
		if (EC.isEulerian())
		{
			System.out.println("The graph does an Eulerian cycle.");
			EC.printEulerianCycle();
		}
		else System.out.println("The graph does not have an Eulerian cycle.");
	}
}

And an example of input data:
8
12
0 1
1 2
2 4
0 3
3 5
5 6
6 7
7 4
1 3
1 4
3 6
4 6

Result: 
The graph does an Eulerian cycle.
0 - 3 - 6 - 4 - 1 - 3 - 5 - 6 - 7 - 4 - 2 - 1 - 0.