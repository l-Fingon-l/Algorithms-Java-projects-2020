import edu.princeton.cs.algs4.Graph;

public class EulerCycle 
{
	private boolean[] marked;    
    private int count;           

    public EulerCycle (Graph G, int s) 
    {
        marked = new boolean[G.V()];
        validateVertex(s);
        if (dfs(G, s)) System.out.println("The graph i");
    }

    // depth first search from v
    private boolean dfs(Graph G, int v) 
    {
        count++;
        marked[v] = true;
        for (int w : G.adj(v)) 
            if (!marked[w]) 
                return dfs(G, w);
    }
    
    public boolean marked(int v) 
    {
        validateVertex(v);
        return marked[v];
    }

    public int count() 
    {
        return count;
    }

    private void validateVertex(int v) 
    {
        int V = marked.length;
        if (v < 0 || v >= V)
            throw new IllegalArgumentException("vertex " + v + " is not between 0 and " + (V-1));
    }
	
	
	
	
	
}
